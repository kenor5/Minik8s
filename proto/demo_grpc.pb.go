// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pb/demo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_SimpleRPC_FullMethodName                = "/pb.Greeter/SimpleRPC"
	Greeter_ServerSideStreamingRPC_FullMethodName   = "/pb.Greeter/ServerSideStreamingRPC"
	Greeter_ClientSideStreamingRPC_FullMethodName   = "/pb.Greeter/ClientSideStreamingRPC"
	Greeter_BidrectionalStreamingRPC_FullMethodName = "/pb.Greeter/BidrectionalStreamingRPC"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// 简单 RPC
	SimpleRPC(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// 服务端流式 RPC
	ServerSideStreamingRPC(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_ServerSideStreamingRPCClient, error)
	// 客户端流式 RPC
	ClientSideStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientSideStreamingRPCClient, error)
	// 双端流式 RPC
	BidrectionalStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidrectionalStreamingRPCClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SimpleRPC(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Greeter_SimpleRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ServerSideStreamingRPC(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_ServerSideStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_ServerSideStreamingRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerSideStreamingRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerSideStreamingRPCClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterServerSideStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *greeterServerSideStreamingRPCClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ClientSideStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientSideStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_ClientSideStreamingRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientSideStreamingRPCClient{stream}
	return x, nil
}

type Greeter_ClientSideStreamingRPCClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterClientSideStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *greeterClientSideStreamingRPCClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientSideStreamingRPCClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) BidrectionalStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidrectionalStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], Greeter_BidrectionalStreamingRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterBidrectionalStreamingRPCClient{stream}
	return x, nil
}

type Greeter_BidrectionalStreamingRPCClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterBidrectionalStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *greeterBidrectionalStreamingRPCClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterBidrectionalStreamingRPCClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// 简单 RPC
	SimpleRPC(context.Context, *HelloRequest) (*HelloResponse, error)
	// 服务端流式 RPC
	ServerSideStreamingRPC(*HelloRequest, Greeter_ServerSideStreamingRPCServer) error
	// 客户端流式 RPC
	ClientSideStreamingRPC(Greeter_ClientSideStreamingRPCServer) error
	// 双端流式 RPC
	BidrectionalStreamingRPC(Greeter_BidrectionalStreamingRPCServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SimpleRPC(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRPC not implemented")
}
func (UnimplementedGreeterServer) ServerSideStreamingRPC(*HelloRequest, Greeter_ServerSideStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSideStreamingRPC not implemented")
}
func (UnimplementedGreeterServer) ClientSideStreamingRPC(Greeter_ClientSideStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSideStreamingRPC not implemented")
}
func (UnimplementedGreeterServer) BidrectionalStreamingRPC(Greeter_BidrectionalStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidrectionalStreamingRPC not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SimpleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SimpleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SimpleRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SimpleRPC(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ServerSideStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerSideStreamingRPC(m, &greeterServerSideStreamingRPCServer{stream})
}

type Greeter_ServerSideStreamingRPCServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type greeterServerSideStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *greeterServerSideStreamingRPCServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_ClientSideStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientSideStreamingRPC(&greeterClientSideStreamingRPCServer{stream})
}

type Greeter_ClientSideStreamingRPCServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterClientSideStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *greeterClientSideStreamingRPCServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientSideStreamingRPCServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_BidrectionalStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).BidrectionalStreamingRPC(&greeterBidrectionalStreamingRPCServer{stream})
}

type Greeter_BidrectionalStreamingRPCServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterBidrectionalStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *greeterBidrectionalStreamingRPCServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterBidrectionalStreamingRPCServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRPC",
			Handler:    _Greeter_SimpleRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSideStreamingRPC",
			Handler:       _Greeter_ServerSideStreamingRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientSideStreamingRPC",
			Handler:       _Greeter_ClientSideStreamingRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidrectionalStreamingRPC",
			Handler:       _Greeter_BidrectionalStreamingRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/demo.proto",
}
