// grpc server is API Server and client is Kubectl

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/apiserver_for_kubectl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiServerKubectlService_SayHello_FullMethodName  = "/apiserver_for_kubectl.ApiServerKubectlService/SayHello"
	ApiServerKubectlService_ApplyPod_FullMethodName  = "/apiserver_for_kubectl.ApiServerKubectlService/ApplyPod"
	ApiServerKubectlService_DeletePod_FullMethodName = "/apiserver_for_kubectl.ApiServerKubectlService/DeletePod"
	ApiServerKubectlService_GetPod_FullMethodName    = "/apiserver_for_kubectl.ApiServerKubectlService/GetPod"
)

// ApiServerKubectlServiceClient is the client API for ApiServerKubectlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServerKubectlServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	ApplyPod(ctx context.Context, in *ApplyPodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error)
}

type apiServerKubectlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServerKubectlServiceClient(cc grpc.ClientConnInterface) ApiServerKubectlServiceClient {
	return &apiServerKubectlServiceClient{cc}
}

func (c *apiServerKubectlServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, ApiServerKubectlService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerKubectlServiceClient) ApplyPod(ctx context.Context, in *ApplyPodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ApiServerKubectlService_ApplyPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerKubectlServiceClient) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ApiServerKubectlService_DeletePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServerKubectlServiceClient) GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error) {
	out := new(GetPodResponse)
	err := c.cc.Invoke(ctx, ApiServerKubectlService_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServerKubectlServiceServer is the server API for ApiServerKubectlService service.
// All implementations must embed UnimplementedApiServerKubectlServiceServer
// for forward compatibility
type ApiServerKubectlServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	ApplyPod(context.Context, *ApplyPodRequest) (*StatusResponse, error)
	DeletePod(context.Context, *DeletePodRequest) (*StatusResponse, error)
	GetPod(context.Context, *GetPodRequest) (*GetPodResponse, error)
	mustEmbedUnimplementedApiServerKubectlServiceServer()
}

// UnimplementedApiServerKubectlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServerKubectlServiceServer struct {
}

func (UnimplementedApiServerKubectlServiceServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedApiServerKubectlServiceServer) ApplyPod(context.Context, *ApplyPodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPod not implemented")
}
func (UnimplementedApiServerKubectlServiceServer) DeletePod(context.Context, *DeletePodRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedApiServerKubectlServiceServer) GetPod(context.Context, *GetPodRequest) (*GetPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedApiServerKubectlServiceServer) mustEmbedUnimplementedApiServerKubectlServiceServer() {
}

// UnsafeApiServerKubectlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServerKubectlServiceServer will
// result in compilation errors.
type UnsafeApiServerKubectlServiceServer interface {
	mustEmbedUnimplementedApiServerKubectlServiceServer()
}

func RegisterApiServerKubectlServiceServer(s grpc.ServiceRegistrar, srv ApiServerKubectlServiceServer) {
	s.RegisterService(&ApiServerKubectlService_ServiceDesc, srv)
}

func _ApiServerKubectlService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerKubectlServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiServerKubectlService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerKubectlServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServerKubectlService_ApplyPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerKubectlServiceServer).ApplyPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiServerKubectlService_ApplyPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerKubectlServiceServer).ApplyPod(ctx, req.(*ApplyPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServerKubectlService_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerKubectlServiceServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiServerKubectlService_DeletePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerKubectlServiceServer).DeletePod(ctx, req.(*DeletePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiServerKubectlService_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerKubectlServiceServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiServerKubectlService_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerKubectlServiceServer).GetPod(ctx, req.(*GetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiServerKubectlService_ServiceDesc is the grpc.ServiceDesc for ApiServerKubectlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiServerKubectlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver_for_kubectl.ApiServerKubectlService",
	HandlerType: (*ApiServerKubectlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ApiServerKubectlService_SayHello_Handler,
		},
		{
			MethodName: "ApplyPod",
			Handler:    _ApiServerKubectlService_ApplyPod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _ApiServerKubectlService_DeletePod_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _ApiServerKubectlService_GetPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/apiserver_for_kubectl.proto",
}
